import logging
import uuid
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.exc import IntegrityError
from sqlalchemy.future import select

from script.db import User, async_session

logger = logging.getLogger(__name__)
router = Router()

class Registration(StatesGroup):
    role = State()
    tutor_code = State()

def get_role_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–Ø –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data="role_teacher")],
        [InlineKeyboardButton(text="–Ø –°–ª—É—à–∞—Ç–µ–ª—å", callback_data="role_student")]
    ])

@router.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    user_id = message.from_user.id
    async with async_session() as session:
        user = await session.get(User, user_id)

    if user:
        await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {user.username}!\n–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ {user.role}.")
        await state.clear()
    else:
        await message.answer(
            "üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å–≤–æ—é —Ä–æ–ª—å:",
            reply_markup=get_role_keyboard()
        )
        await state.set_state(Registration.role)

@router.callback_query(Registration.role, F.data == 'role_teacher')
async def teacher_role_chosen(query: CallbackQuery, state: FSMContext):
    user_id = query.from_user.id
    username = query.from_user.username or f"user_{user_id}"
    tutor_code = str(uuid.uuid4())[:8] # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥

    new_user = User(
        userid=user_id,
        username=username,
        role='teacher',
        tutorcode=tutor_code
    )
    async with async_session() as session:
        session.add(new_user)
        await session.commit()

    await query.message.edit_text(
        "‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ <b>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å</b>.\n"
        f"–í–∞—à –∫–æ–¥ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: <code>{tutor_code}</code>"
    )
    await state.clear()

@router.callback_query(Registration.role, F.data == 'role_student')
async def student_role_chosen(query: CallbackQuery, state: FSMContext):
    await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:")
    await state.set_state(Registration.tutor_code)

@router.message(Registration.tutor_code)
async def process_tutor_code(message: Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username or f"user_{user_id}"
    tutor_code = message.text

    async with async_session() as session:
        result = await session.execute(select(User).where(User.tutorcode == tutor_code))
        teacher = result.scalar_one_or_none()

    if teacher:
        new_user = User(
            userid=user_id,
            username=username,
            role='student',
            subscribe=teacher.username
        )
        async with async_session() as session:
            session.add(new_user)
            await session.commit()

        await message.answer(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ <b>–°–ª—É—à–∞—Ç–µ–ª—å</b> –∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è @{teacher.username}.")
        await state.clear()
    else:
        await message.answer("‚ùå –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏, –Ω–∞–∂–∞–≤ /start.")

# –û–±–Ω–æ–≤–ª—è–µ–º status_handler –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª—è role
# (–≠—Ç–æ—Ç —à–∞–≥ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –¥–∞–ª–µ–µ –≤ handlers/status.py)
