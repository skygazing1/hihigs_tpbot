from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
import logging
from script.db import User, async_session
from sqlalchemy.future import select

router = Router()

logger = logging.getLogger(__name__)

@router.message(Command("status"))
async def status_handler(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username or "N/A"
    
    async with async_session() as session:
        user = await session.get(User, user_id)

    if not user:
        await message.answer(
            "‚ö†Ô∏è –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
        )
        return

    status_text = (
        f"<b>üìù –í–∞—à —Å—Ç–∞—Ç—É—Å</b>\n\n"
        f"<b>ID:</b> <code>{user.userid}</code>\n"
        f"<b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{username}\n"
    )

    if user.role == 'teacher':
        status_text += f"<b>–†–æ–ª—å:</b> –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å\n"
        status_text += f"<b>–ö–æ–¥ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤:</b> <code>{user.tutorcode}</code>"
    elif user.role == 'student':
        status_text += f"<b>–†–æ–ª—å:</b> –°–ª—É—à–∞—Ç–µ–ª—å\n"
        status_text += f"<b>–ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞:</b> @{user.subscribe}"

    if not user.vm_host:
        status_text += "\n\n" \
                       "‚ùóÔ∏è –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VM –Ω–µ –∑–∞–¥–∞–Ω—ã.\n" \
                       "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /vmpath, —á—Ç–æ–±—ã –∏—Ö —É–∫–∞–∑–∞—Ç—å."

    await message.answer(status_text)

@router.callback_query(F.data == "status")
async def status_callback(callback: CallbackQuery):
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É '–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å'")
    user_id = callback.from_user.id
    username = callback.from_user.username or "–Ω–µ—Ç username"

    async with async_session() as session:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º select –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        result = await session.execute(select(User).where(User.userid == user_id))
        user = result.scalar_one_or_none()

        if not user:
            await callback.message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ role –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        if user.role == "–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å":
            await callback.message.answer(
                f"üßæ –¢–≤–æ–π ID: <code>{user_id}</code>\n"
                f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{username}\n"
                f"–†–æ–ª—å: –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å\n"
                f"–ö–æ–¥: {user.tutorcode}"
            )
        elif user.role == "—Å–ª—É—à–∞—Ç–µ–ª—å":
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å –ø–æ–∏—Å–∫ –∏–º–µ–Ω–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ user.tutor_id, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–º–µ–Ω–Ω–æ –∏–º—è
            await callback.message.answer(
                f"üßæ –¢–≤–æ–π ID: <code>{user_id}</code>\n"
                f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{username}\n"
                f"–†–æ–ª—å: –°–ª—É—à–∞—Ç–µ–ª—å\n"
                f"–ü–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è ID: {user.tutor_id}" # –ü–æ–∫–∞ –≤—ã–≤–æ–¥–∏–º ID –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
            )
    await callback.answer()
