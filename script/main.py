import logging
from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
import paramiko
from .classes import FileOperations
from .db import get_db_session, VMConnection

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()

@router.message(Command("ls"))
async def cmd_ls(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ls.
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ VM.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∏–∑ –ë–î
        session = get_db_session()
        vm_connection = session.query(VMConnection).filter_by(user_id=message.from_user.id).first()
        
        if not vm_connection:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VM —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /vmpath")
            return
            
        # –°–æ–∑–¥–∞–µ–º SSH-–∫–ª–∏–µ–Ω—Ç
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ VM
            ssh.connect(
                hostname=vm_connection.host,
                username=vm_connection.username,
                password=vm_connection.password
            )
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä FileOperations
            file_ops = FileOperations(ssh)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
            files = await file_ops.list_directory()
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—ã–≤–æ–¥
            response = "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞:\n\n"
            for file_info in files:
                file_type = "üìÅ" if file_info['type'] == 'directory' else "üìÑ"
                response += f"{file_type} {file_info['name']} ({file_info['size']} bytes)\n"
                
            await message.answer(response)
            
        except Exception as e:
            logger.error(f"Error in cmd_ls: {str(e)}")
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ VM: {str(e)}")
            
        finally:
            ssh.close()
            
    except Exception as e:
        logger.error(f"Error in cmd_ls: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

@router.message(Command("cat"))
async def cmd_cat(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cat.
    –í—ã–≤–æ–¥–∏—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–æ–º–∞—à–Ω–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ.
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∏–∑ –ë–î
        session = get_db_session()
        vm_connection = session.query(VMConnection).filter_by(user_id=message.from_user.id).first()
        
        if not vm_connection:
            await message.answer("–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ VM —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /vmpath")
            return
            
        # –°–æ–∑–¥–∞–µ–º SSH-–∫–ª–∏–µ–Ω—Ç
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        
        try:
            # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ VM
            ssh.connect(
                hostname=vm_connection.host,
                username=vm_connection.username,
                password=vm_connection.password
            )
            
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä FileOperations
            file_ops = FileOperations(ssh)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
            text_files = await file_ops.read_text_files()
            
            if not text_files:
                await message.answer("–í –¥–æ–º–∞—à–Ω–µ–º –∫–∞—Ç–∞–ª–æ–≥–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤")
                return
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
            for filename, content in text_files.items():
                # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if len(content) > 4000:
                    chunks = [content[i:i+4000] for i in range(0, len(content), 4000)]
                    for i, chunk in enumerate(chunks, 1):
                        await message.answer(f"–§–∞–π–ª: {filename} (—á–∞—Å—Ç—å {i}/{len(chunks)})\n\n{chunk}")
                else:
                    await message.answer(f"–§–∞–π–ª: {filename}\n\n{content}")
                    
        except Exception as e:
            logger.error(f"Error in cmd_cat: {str(e)}")
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ VM: {str(e)}")
            
        finally:
            ssh.close()
            
    except Exception as e:
        logger.error(f"Error in cmd_cat: {str(e)}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã") 